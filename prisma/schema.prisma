generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  treasure      Int       @default(0)
  createdAt     DateTime  @default(now())
  emailVerified DateTime?
  image         String?
  updatedAt     DateTime  @updatedAt
  experience    Int       @default(0)
  battling      Boolean   @default(false)
  accounts      Account[]
  battles       Battle[]
  inventory     Item[]
  sessions      Session[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Boss {
  id        Int     @id @default(autoincrement())
  name      String
  desc      String
  image     String
  maxHealth Int
  health    Int
  strength  String
  weakness  String
  active    Boolean @default(false)
}

model Item {
  id         Int    @id @default(autoincrement())
  name       String
  desc       String
  image      String
  rarity     Int
  userId     String
  multiplier Float  @default(1)
  user       User   @relation(fields: [userId], references: [id])
}

model Battle {
  id        Int      @id @default(autoincrement())
  userId    String
  duration  Int      @default(0)
  projectId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}
